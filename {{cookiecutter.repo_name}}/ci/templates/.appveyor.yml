version: '{branch}-{build}'
build: off
{%- if cookiecutter._legacy_python == "yes" %}
image:
  - Visual Studio 2019
  - Visual Studio 2015
matrix:
  exclude:
    - image: Visual Studio 2019
      PYTHON_VERSION: 2.7
{%- for version in ['3.6', '3.7', '3.8', '3.9'] %}
    - image: Visual Studio 2015
      PYTHON_VERSION: '{{ version }}'
{%- endfor %}
{%- else %}
image: Visual Studio 2019
{%- endif %}
environment:
{%- set environment_global_interior %}
{%- if cookiecutter._c_extension_test_pypi == 'yes' %}
    TWINE_USERNAME: {{ cookiecutter._c_extension_test_pypi_username }}
{%- endif %}
{%- if cookiecutter._coveralls == 'yes' %}
    COVERALLS_EXTRAS: '-v'
{%- endif %}
{%- endset %}
{%- if environment_global_interior %}
  global:{{ environment_global_interior }}
{%- endif %}
  matrix:
    - TOXENV: check
      TOXPYTHON: C:\Python36\python.exe
      PYTHON_HOME: C:\Python36
      PYTHON_VERSION: '3.6'
      PYTHON_ARCH: '32'
{% if cookiecutter._test_matrix_configurator == "yes" -%}
{{ "{% for env, config in tox_environments|dictsort %}" }}
{%- else -%}
{{ "{% for env in tox_environments %}" }}
{%- endif %}
{{ "{% if env.startswith(('py2', 'py3')) %}" }}
{%- for arch in ['32', '64'] %}
    - TOXENV: {{ "{{ env }}" }}
        {%- if cookiecutter._test_matrix_separate_coverage == "yes" -%}
            {%- if cookiecutter._test_matrix_configurator == "yes" -%}
                {{ "{% if config.cover %}" }}
            {%- else -%}
                {{ "{% if env.endswith('-cover') %}" }}
            {%- endif -%}
        {%- endif -%}
        {%- if cookiecutter._codecov == 'yes' %},codecov{% endif -%}
        {%- if cookiecutter._coveralls == 'yes' %},coveralls{% endif -%}
        {%- if cookiecutter._test_matrix_separate_coverage == "yes" -%}
            {{ "{% endif %}" }}
        {%- endif -%}{{ '{{ "" }}' }}
      TOXPYTHON: C:\Python{{ "{{ env[2:4] }}" }}{{ '' if arch == '32' else '-x64' }}\python.exe
      PYTHON_HOME: C:\Python{{ "{{ env[2:4] }}" }}{{ '' if arch == '32' else '-x64' }}
      PYTHON_VERSION: {{ "'{{ env[2] }}.{{ env[3] }}'"}}
      PYTHON_ARCH: '{{ arch }}'
{{ "{% if 'nocov' in env %}" }}
{{ "      WHEEL_PATH: .tox/dist" }}
{{ "{% endif %}" }}
{%- endfor %}
{{ "{% endif %}{% endfor %}" }}
init:
  - ps: echo $env:TOXENV
  - ps: ls C:\Python*
install:
{%- if cookiecutter._c_extension_test_pypi == "yes" %}
  - '%PYTHON_HOME%\python -mpip install --progress-bar=off twine tox-wheel -rci/requirements.txt'
{%- else %}
  - '%PYTHON_HOME%\python -mpip install --progress-bar=off tox -rci/requirements.txt'
{%- endif %}
  - '%PYTHON_HOME%\Scripts\virtualenv --version'
  - '%PYTHON_HOME%\Scripts\pip --version'
  - '%PYTHON_HOME%\Scripts\tox --version'
test_script:
  - %PYTHON_HOME%\Scripts\tox
{%- if cookiecutter._c_extension_test_pypi == "yes" %}
on_success:
  - IF DEFINED WHEEL_PATH %PYTHON_HOME%\Scripts\twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing %WHEEL_PATH%/*.whl
{%- endif %}
on_failure:
  - ps: dir "env:"
  - ps: get-content .tox\*\log\*

### To enable remote debugging uncomment this (also, see: http://www.appveyor.com/docs/how-to/rdp-to-build-worker):
# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
